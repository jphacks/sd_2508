import { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { ref, onValue, off } from 'firebase/database';
import { db, rtdb } from '../firebase';
import { RoomProfile, Device, CalibrationPoint } from '../types';

export default function AddCalibrationPoint() {
  const { roomId } = useParams<{ roomId: string }>();
  const navigate = useNavigate();
  
  const [room, setRoom] = useState<RoomProfile | null>(null);
  const [devices, setDevices] = useState<Device[]>([]);
  const [selectedDevice, setSelectedDevice] = useState<string>('');
  const [selectedPosition, setSelectedPosition] = useState<{ x: number; y: number } | null>(null);
  const [pointLabel, setPointLabel] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [currentMeasurement, setCurrentMeasurement] = useState<any>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [loading, setLoading] = useState(true);

  // Ê∏¨ÂÆö„Ç≠„É£„É≥„Çª„É´Áî®
  const trackerRefRef = useRef<any>(null);
  const listenerRef = useRef<any>(null);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    loadRoom();
    loadDevices();
  }, [roomId]);

  useEffect(() => {
    if (room && canvasRef.current) {
      drawRoom();
    }
  }, [room, selectedPosition]);

  const loadRoom = async () => {
    if (!roomId) return;
    
    try {
      const roomDoc = await getDoc(doc(db, 'rooms', roomId));
      if (roomDoc.exists()) {
        const roomData = { roomId: roomDoc.id, ...roomDoc.data() } as RoomProfile;
        setRoom(roomData);
      } else {
        alert('„É´„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        navigate('/management');
      }
      setLoading(false);
    } catch (error) {
      console.error('„É´„Éº„É†Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
      setLoading(false);
    }
  };

  const loadDevices = async () => {
    try {
      const devicesSnapshot = await (await import('firebase/firestore')).getDocs(
        (await import('firebase/firestore')).collection(db, 'devices')
      );
      const data = devicesSnapshot.docs.map(doc => ({ 
        id: doc.id,
        ...doc.data()
      } as Device & { id: string }));
      setDevices(data);
    } catch (error) {
      console.error('„Éá„Éê„Ç§„ÇπË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
    }
  };

  const drawRoom = () => {
    const canvas = canvasRef.current;
    if (!canvas || !room) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const padding = 40;
    const width = canvas.width - padding * 2;
    const height = canvas.height - padding * 2;
    
    const scaleX = width / (room.outline?.width || 10);
    const scaleY = height / (room.outline?.height || 8);
    const scale = Math.min(scaleX, scaleY);

    // „ÇØ„É™„Ç¢
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // ËÉåÊôØ
    ctx.fillStyle = '#f5f7fa';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // ÈÉ®Â±ã„ÅÆËº™ÈÉ≠
    ctx.strokeStyle = '#2c3e50';
    ctx.lineWidth = 3;
    ctx.strokeRect(
      padding,
      padding,
      (room.outline?.width || 10) * scale,
      (room.outline?.height || 8) * scale
    );

    // ÂÆ∂ÂÖ∑„ÇíÊèèÁîª
    if (room.furniture) {
      room.furniture.forEach(item => {
        const x = padding + item.position.x * scale;
        const y = padding + item.position.y * scale;
        const w = (item.width || 1) * scale;
        const h = (item.height || 1) * scale;

        ctx.fillStyle = '#95a5a6';
        ctx.fillRect(x, y, w, h);
        ctx.strokeStyle = '#7f8c8d';
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, w, h);

        // ÂÆ∂ÂÖ∑„Çø„Ç§„Éó„ÅÆ„É©„Éô„É´
        ctx.fillStyle = '#2c3e50';
        ctx.font = '12px sans-serif';
        ctx.textAlign = 'center';
        ctx.fillText(item.type, x + w / 2, y + h / 2 + 4);
      });
    }

    // Êó¢Â≠ò„ÅÆ„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥ÁÇπ„ÇíÊèèÁîª
    ctx.fillStyle = '#3498db';
    room.calibrationPoints.forEach(point => {
      const x = padding + point.position.x * scale;
      const y = padding + point.position.y * scale;
      
      ctx.beginPath();
      ctx.arc(x, y, 6, 0, 2 * Math.PI);
      ctx.fill();
      
      // „É©„Éô„É´
      ctx.fillStyle = '#2c3e50';
      ctx.font = '11px sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(point.label, x, y - 10);
      ctx.fillStyle = '#3498db';
    });

    // ÈÅ∏Êäû„Åï„Çå„Åü‰ΩçÁΩÆ„ÇíÊèèÁîª
    if (selectedPosition) {
      const x = padding + selectedPosition.x * scale;
      const y = padding + selectedPosition.y * scale;
      
      ctx.fillStyle = '#e74c3c';
      ctx.beginPath();
      ctx.arc(x, y, 8, 0, 2 * Math.PI);
      ctx.fill();
      
      // ÂçÅÂ≠ó„Éû„Éº„ÇØ
      ctx.strokeStyle = '#e74c3c';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(x - 12, y);
      ctx.lineTo(x + 12, y);
      ctx.moveTo(x, y - 12);
      ctx.lineTo(x, y + 12);
      ctx.stroke();

      // „É©„Éô„É´
      if (pointLabel) {
        ctx.fillStyle = '#e74c3c';
        ctx.font = 'bold 12px sans-serif';
        ctx.textAlign = 'center';
        ctx.fillText(pointLabel, x, y - 15);
      }
    }
  };

  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas || !room) return;

    const rect = canvas.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const clickY = e.clientY - rect.top;

    const padding = 40;
    const width = canvas.width - padding * 2;
    const height = canvas.height - padding * 2;
    
    const scaleX = width / (room.outline?.width || 10);
    const scaleY = height / (room.outline?.height || 8);
    const scale = Math.min(scaleX, scaleY);

    // „ÇØ„É™„ÉÉ„ÇØ‰ΩçÁΩÆ„ÇíÈÉ®Â±ãÂ∫ßÊ®ô„Å´Â§âÊèõ
    const roomX = (clickX - padding) / scale;
    const roomY = (clickY - padding) / scale;

    // ÈÉ®Â±ã„ÅÆÁØÑÂõ≤ÂÜÖ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (roomX >= 0 && roomX <= (room.outline?.width || 10) &&
        roomY >= 0 && roomY <= (room.outline?.height || 8)) {
      setSelectedPosition({ x: roomX, y: roomY });
    }
  };

  const startMeasurement = () => {
    if (!selectedDevice) {
      alert('Ê∏¨ÂÆö„Å´‰ΩøÁî®„Åô„Çã„Éá„Éê„Ç§„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    if (!selectedPosition) {
      alert('„Éû„ÉÉ„Éó‰∏ä„ÅßÊ∏¨ÂÆö‰ΩçÁΩÆ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    if (!pointLabel.trim()) {
      alert('Ê∏¨ÂÆö„Éù„Ç§„É≥„Éà„ÅÆ„É©„Éô„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    setIsScanning(true);
    
    // RTDB„Åã„ÇâË©≤ÂΩì„Éà„É©„ÉÉ„Ç´„Éº„ÅÆ„Éá„Éº„Çø„ÇíÁõ£Ë¶ñ
    // „Éá„Éê„Ç§„ÇπID„ÇíÂ∞èÊñáÂ≠ó„Å´Ê≠£Ë¶èÂåñÔºàRTDB„Å®‰∏ÄËá¥„Åï„Åõ„ÇãÔºâ
    const normalizedDeviceId = selectedDevice.toLowerCase();
    const trackerRef = ref(rtdb, `devices/${normalizedDeviceId}`);
    trackerRefRef.current = trackerRef;
    
    console.log('üìç Ê∏¨ÂÆöÈñãÂßã:', { selectedDevice, normalizedDeviceId, path: `devices/${normalizedDeviceId}` });
    
    // Ê∏¨ÂÆöÈñãÂßãÊôÇ„ÅÆ„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÇíË®òÈå≤
    let initialTimestamp: string | null = null;
    
    const listener = onValue(trackerRef, (snapshot) => {
      const data = snapshot.val();
      console.log('üì° RTDBÊõ¥Êñ∞Ê§úÁü•:', { data, timestamp: data?.beaconsUpdatedAt });
      
      if (data && data.beacons) {
        const currentTimestamp = data.beaconsUpdatedAt;
        console.log('‚è∞ „Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÊØîËºÉ:', { initialTimestamp, currentTimestamp, isNew: currentTimestamp !== initialTimestamp });
        
        // ÂàùÂõû„ÅÆÂëº„Å≥Âá∫„Åó„Åß„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÇíË®òÈå≤
        if (initialTimestamp === null) {
          initialTimestamp = currentTimestamp;
          console.log('‚úÖ ÂàùÂõû„Çø„Ç§„É†„Çπ„Çø„É≥„ÉóË®òÈå≤:', initialTimestamp);
          return;
        }
        
        // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÇâÊñ∞„Åó„ÅÑ„Éá„Éº„Çø„Å®Âà§ÂÆö
        if (currentTimestamp !== initialTimestamp) {
          console.log('üéØ Êñ∞„Åó„ÅÑ„Éá„Éº„ÇøÊ§úÁü•ÔºÅÊ∏¨ÂÆöÂÆå‰∫Ü');
          
          // ÂêÑ„Éì„Éº„Ç≥„É≥„Åã„ÇâRSSIÂÄ§„ÇíÂèñÂæó
          const rssiMap: { [beaconId: string]: number } = {};
          
          data.beacons.forEach((beacon: any) => {
            if (beacon.mac && beacon.rssi) {
              // MAC„Ç¢„Éâ„É¨„Çπ„ÇíÊ≠£Ë¶èÂåñÔºà„Ç≥„É≠„É≥Âå∫Âàá„Çä„ÇíÂ§ßÊñáÂ≠ó„Å´Áµ±‰∏ÄÔºâ
              const normalizedMac = beacon.mac.toUpperCase().replace(/:/g, '');
              rssiMap[normalizedMac] = beacon.rssi;
            }
          });
          
          console.log('üìä ÂèñÂæó„Åó„ÅüRSSIÂÄ§:', rssiMap);
          
          setCurrentMeasurement({
            deviceId: selectedDevice,
            timestamp: currentTimestamp,
            rssiValues: rssiMap
          });
          
          setIsScanning(false);
          off(trackerRef);
          trackerRefRef.current = null;
          listenerRef.current = null;
          if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
          }
        }
      } else {
        console.log('‚ö†Ô∏è beacons„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', data);
      }
    }, (error) => {
      console.error('‚ùå RTDBË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
      setIsScanning(false);
    });

    listenerRef.current = listener;

    // 65ÁßíÂæå„Å´„Çø„Ç§„É†„Ç¢„Ç¶„Éà
    const timeout = setTimeout(() => {
      if (isScanning) {
        console.log('‚è±Ô∏è Ê∏¨ÂÆö„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà');
        setIsScanning(false);
        off(trackerRef);
        trackerRefRef.current = null;
        listenerRef.current = null;
        alert('Ê∏¨ÂÆö„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ„Éà„É©„ÉÉ„Ç´„Éº„Åå„Éá„Éº„Çø„ÇíÈÄÅ‰ø°„Åô„Çã„Åæ„ÅßÊúÄÂ§ß1ÂàÜ„Åã„Åã„Çä„Åæ„Åô„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      }
    }, 65000);

    timeoutRef.current = timeout;
  };

  const cancelMeasurement = () => {
    console.log('‚ùå Ê∏¨ÂÆö„Çí„Ç≠„É£„É≥„Çª„É´');
    setIsScanning(false);
    
    if (trackerRefRef.current) {
      off(trackerRefRef.current);
      trackerRefRef.current = null;
    }
    
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
    
    listenerRef.current = null;
    setCurrentMeasurement(null);
  };

  const saveCalibrationPoint = async () => {
    if (!currentMeasurement || !selectedPosition || !room) {
      alert('Ê∏¨ÂÆö„ÇíÂÆå‰∫Ü„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    if (!pointLabel.trim()) {
      alert('Ê∏¨ÂÆö„Éù„Ç§„É≥„Éà„ÅÆ„É©„Éô„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    try {
      // Êñ∞„Åó„ÅÑ„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥ÁÇπ„Çí‰ΩúÊàê
      const newPoint: CalibrationPoint = {
        id: `custom-${Date.now()}`,
        position: { x: selectedPosition.x, y: selectedPosition.y },
        label: pointLabel.trim(),
        measurements: [currentMeasurement]
      };

      // Êó¢Â≠ò„ÅÆ„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥ÁÇπ„Å´ËøΩÂä†
      const updatedPoints = [...room.calibrationPoints, newPoint];

      // Firestore„ÇíÊõ¥Êñ∞
      await updateDoc(doc(db, 'rooms', roomId!), {
        calibrationPoints: updatedPoints,
        updatedAt: new Date().toISOString()
      });

      alert('„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥ÁÇπ„ÇíËøΩÂä†„Åó„Åæ„Åó„ÅüÔºÅ');
      navigate('/management');
    } catch (error) {
      console.error('‰øùÂ≠ò„Ç®„É©„Éº:', error);
      alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  if (loading) {
    return (
      <div className="container">
        <p>Ë™≠„ÅøËæº„Åø‰∏≠...</p>
      </div>
    );
  }

  if (!room) {
    return (
      <div className="container">
        <p>„É´„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>
      </div>
    );
  }

  return (
    <div className="container">
      <h1 style={{ marginBottom: '24px', fontSize: '32px', fontWeight: '700' }}>
        „Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥ÁÇπ„ÇíËøΩÂä†
      </h1>

      <div className="card" style={{ marginBottom: '24px' }}>
        <h2 style={{ marginBottom: '16px' }}>{room.name}</h2>
        <p style={{ marginBottom: '16px', color: '#7f8c8d' }}>
          „Éû„ÉÉ„Éó‰∏ä„ÅßÊ∏¨ÂÆö„Åó„Åü„ÅÑ‰ΩçÁΩÆ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ<br />
          Êó¢Â≠ò„ÅÆ„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥ÁÇπ„ÅØ<span style={{ color: '#3498db', fontWeight: 'bold' }}>ÈùíËâ≤</span>„ÄÅ
          Êñ∞Ë¶èËøΩÂä†„Åô„ÇãÁÇπ„ÅØ<span style={{ color: '#e74c3c', fontWeight: 'bold' }}>Ëµ§Ëâ≤</span>„ÅßË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ
        </p>

        <div style={{ marginBottom: '16px', display: 'flex', justifyContent: 'center' }}>
          <canvas
            ref={canvasRef}
            width={600}
            height={480}
            style={{
              border: '2px solid #e1e8ed',
              borderRadius: '8px',
              cursor: 'crosshair',
              backgroundColor: '#f5f7fa'
            }}
            onClick={handleCanvasClick}
          />
        </div>

        {selectedPosition && (
          <div style={{ 
            padding: '16px', 
            backgroundColor: '#E3F2FD', 
            borderRadius: '8px',
            marginBottom: '16px'
          }}>
            <p style={{ margin: '0 0 8px 0', color: '#1976D2', fontWeight: 'bold' }}>
              ‚úì Ê∏¨ÂÆö‰ΩçÁΩÆ„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü
            </p>
            <p style={{ margin: 0, fontSize: '14px', color: '#424242' }}>
              Â∫ßÊ®ô: ({selectedPosition.x.toFixed(2)}m, {selectedPosition.y.toFixed(2)}m)
            </p>
          </div>
        )}

        <div className="form-group">
          <label className="form-label">Ê∏¨ÂÆö„Éù„Ç§„É≥„Éà„ÅÆ„É©„Éô„É´ *</label>
          <input
            type="text"
            className="form-input"
            placeholder="‰æã: „ÉÜ„Éº„Éñ„É´Ê®™„ÄÅÁ™ìÈöõ„ÄÅÂÖ•Âè£‰ªòËøë"
            value={pointLabel}
            onChange={(e) => setPointLabel(e.target.value)}
          />
        </div>

        <div className="form-group">
          <label className="form-label">Ê∏¨ÂÆö„Å´‰ΩøÁî®„Åô„Çã„Éà„É©„ÉÉ„Ç´„Éº *</label>
          <select
            className="form-select"
            value={selectedDevice}
            onChange={(e) => setSelectedDevice(e.target.value)}
          >
            <option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
            {devices.map(device => (
              <option key={device.devEUI} value={device.devEUI}>
                {device.deviceId || device.userName}
              </option>
            ))}
          </select>
        </div>

        <div style={{ marginBottom: '16px' }}>
          <div style={{ display: 'flex', gap: '12px' }}>
            <button
              className="btn btn-primary"
              onClick={startMeasurement}
              disabled={isScanning || !selectedDevice || !selectedPosition || !pointLabel.trim()}
            >
              {isScanning ? 'Ê∏¨ÂÆö‰∏≠...' : '„Åì„Åì„ÅßÊ∏¨ÂÆö'}
            </button>
            {isScanning && (
              <button
                className="btn btn-outline"
                onClick={cancelMeasurement}
              >
                Ê∏¨ÂÆö„Ç≠„É£„É≥„Çª„É´
              </button>
            )}
          </div>
        </div>

        {currentMeasurement && (
          <div style={{ 
            marginBottom: '16px', 
            padding: '16px', 
            backgroundColor: '#D4EDDA', 
            borderRadius: '8px' 
          }}>
            <p style={{ margin: 0, color: '#155724' }}>
              ‚úì Ê∏¨ÂÆöÂÆå‰∫Ü<br />
              Ê§úÂá∫„Åï„Çå„Åü„Éì„Éº„Ç≥„É≥: {Object.keys(currentMeasurement.rssiValues).length}Âè∞
            </p>
            <div style={{ marginTop: '12px' }}>
              <button className="btn btn-primary" onClick={saveCalibrationPoint}>
                „Åì„ÅÆÊ∏¨ÂÆö„Çí‰øùÂ≠ò
              </button>
            </div>
          </div>
        )}

        <div style={{ display: 'flex', gap: '12px', marginTop: '24px' }}>
          <button
            className="btn btn-outline"
            onClick={() => navigate('/management')}
          >
            „Ç≠„É£„É≥„Çª„É´
          </button>
        </div>
      </div>

      <div className="card">
        <h3 style={{ marginBottom: '16px' }}>‰Ωø„ÅÑÊñπ</h3>
        <ol style={{ paddingLeft: '20px', lineHeight: '1.8' }}>
          <li>„Éû„ÉÉ„Éó‰∏ä„ÅßÊ∏¨ÂÆö„Åó„Åü„ÅÑ‰ΩçÁΩÆ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÈÅ∏Êäû„Åó„Åæ„Åô</li>
          <li>Ê∏¨ÂÆö„Éù„Ç§„É≥„Éà„ÅÆ„É©„Éô„É´ÔºàÂêçÂâçÔºâ„ÇíÂÖ•Âäõ„Åó„Åæ„Åô</li>
          <li>Ê∏¨ÂÆö„Å´‰ΩøÁî®„Åô„Çã„Éà„É©„ÉÉ„Ç´„Éº„ÇíÈÅ∏Êäû„Åó„Åæ„Åô</li>
          <li>ÈÅ∏Êäû„Åó„Åü‰ΩçÁΩÆ„Å´„Éà„É©„ÉÉ„Ç´„Éº„ÇíÊåÅ„Å£„Å¶ÁßªÂãï„Åó„Åæ„Åô</li>
          <li>„Äå„Åì„Åì„ÅßÊ∏¨ÂÆö„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åæ„ÅôÔºàÊúÄÂ§ß1ÂàÜÂæÖÊ©üÔºâ</li>
          <li>Ê∏¨ÂÆöÂÆå‰∫ÜÂæå„ÄÅ„Äå„Åì„ÅÆÊ∏¨ÂÆö„Çí‰øùÂ≠ò„Äç„Éú„Çø„É≥„ÅßËøΩÂä†ÂÆå‰∫Ü„Åß„Åô</li>
        </ol>
        <p style={{ marginTop: '16px', color: '#7f8c8d', fontSize: '14px' }}>
          ‚Äª Ê∏¨ÂÆö„ÅØÈùôÊ≠¢„Åó„ÅüÁä∂ÊÖã„ÅßË°å„ÅÜ„Å®Á≤æÂ∫¶„Åå‰∏ä„Åå„Çä„Åæ„Åô<br />
          ‚Äª ËøΩÂä†„Åó„Åü„Ç≠„É£„É™„Éñ„É¨„Éº„Ç∑„Éß„É≥ÁÇπ„ÅØÂç≥Â∫ß„Å´‰ΩçÁΩÆÊé®ÂÆö„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô
        </p>
      </div>
    </div>
  );
}
